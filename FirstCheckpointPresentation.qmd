---
title: "Run or Pass?"
author: "Verity and Cale"
format:
  revealjs:
    theme: EDA_theme.scss
    chalkboard: true
    smaller: true
    slide-number: c/t
    code-line-numbers: false
    linestretch: 1.25
    html-math-method:
      method: mathjax
---

## Predicting Offensive Play Calls in the NFL

* Accurately anticipating a run or passing play is vital for defensive play-calling

. . . 

* The game is won through strategy, both on the field and the sidelines

. . . 

* Our goal is to build a model that predicts the likelihood of a run play given pre-snap context

## Data

* Play-by-play and tracking data from the first 9 weeks of the 2021 season

. . . 

* So far we have only used the basic plays data
  <ul>
      <li class="fragment">Key variables: quarter, down, distance, game clock, yard line, etc.</li>
  </ul>

. . . 

* Created features:
  <ul>
      <li>Situational run rate</li>
      <li>Yardline relative to the offense</li>
      <li>Score differential from possession team's POV</li>
      
## Down and distance are major tells of what an offense will do

```{r}

library(dplyr)
library(ggplot2)
library(viridis)
library(scales)

# Load your data
plays <- read.csv("plays.csv")
player_play <- read.csv("player_play.csv")
games <- read.csv("games.csv")

# Bin yardsToGo into categories
plays <- plays %>%
  mutate(
    ytg_bin = case_when(
      yardsToGo <= 1 ~ "Short (0-1)",
      yardsToGo <= 3 ~ "Short (2-3)",
      yardsToGo <= 6 ~ "Medium (4-6)",
      yardsToGo <= 10 ~ "Medium (7-10)",
      yardsToGo <= 20 ~ "Long (11-20)",
      TRUE ~ "Very Long (21+)"
    ),
    down = factor(down, levels = 1:4),
    ytg_bin = factor(ytg_bin, levels = c("Short (0-1)", "Short (2-3)", "Medium (4-6)", "Medium (7-10)", "Long (11-20)", "Very Long (21+)"))
  )

# Identify scrambles (exclude these as runs)
scrambles <- plays %>%
  filter(dropbackType == "SCRAMBLE", passResult == "R") %>%
  select(gameId, playId) %>%
  mutate(is_scramble = TRUE)

# Identify run plays (hadRushAttempt = 1, exclude scrambles)
run_plays <- player_play %>%
  filter(hadRushAttempt == 1) %>%
  select(gameId, playId) %>%
  left_join(scrambles, by = c("gameId", "playId")) %>%
  filter(is.na(is_scramble)) %>%
  mutate(is_run = 1)

# Join run info back to plays, mark non-run plays with 0
plays <- plays %>%
  left_join(run_plays %>% select(gameId, playId, is_run), by = c("gameId", "playId")) %>%
  mutate(is_run = ifelse(is.na(is_run), 0, is_run))

# Calculate run proportions by down and ytg_bin
run_props <- plays %>%
  filter(!is.na(down), !is.na(ytg_bin)) %>%
  group_by(down, ytg_bin) %>%
  summarise(
    total_plays = n(),
    run_plays = sum(is_run),
    run_prop = run_plays / total_plays,
    .groups = "drop"
  )

# Plot heatmap with viridis color scale
ggplot(run_props, aes(x = down, y = ytg_bin, fill = run_prop)) +
  geom_tile(color = "grey90", linewidth = 0.3) +
  geom_text(aes(label = percent(run_prop, accuracy = 1)), color = "black", size = 4) +
  scale_fill_viridis_c(
    option = "D",
    direction = -1,
    limits = c(0, 1),
    labels = percent_format(accuracy = 1),
    name = "Run Probability"
  ) +
  labs(
    subtitle = "Binned yards to go categories",
    x = "Down",
    y = "Yards to Go"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    panel.grid = element_blank(),
    plot.title = element_text(face = "bold", hjust = 0.5, size = 18),
    plot.subtitle = element_text(hjust = 0.5, size = 15),
    axis.title = element_text(face = "bold", size = 20),
    axis.text = element_text(color = "black", size = 15),
    legend.title = element_text(face = "bold"),
    legend.text = element_text(size = 10)
  )


```

## Run proportions vary widely for different teams

```{r}

team_props <- data.frame(
  team = c("ARI", "ATL", "BAL", "BUF", "CAR", "CHI", "CIN", "CLE", "DAL", "DEN", "DET", "GB", "HOU", "IND", "JAX", "KC", "LA", "LAC", "LV", "MIA", "MIN", "NE", "NO", "NYG", "NYJ", "PHI", "PIT", "SEA", "SF", "TB", "TEN", "WAS"),
  offense_run_prop = c(
    0.3409490, 0.5459883, 0.4584139, 0.3347548, 0.4082969, 0.5352941,
    0.3520871, 0.4785156, 0.4701987, 0.3877551, 0.4104167, 0.3854545,
    0.3958333, 0.3420139, 0.4272560, 0.3074004, 0.3476395, 0.3186373,
    0.3432836, 0.3500967, 0.3581781, 0.4450758, 0.3992740, 0.4669510,
    0.3694853, 0.4674556, 0.3465553, 0.4034707, 0.4317181, 0.3065954,
    0.5476190, 0.3697183
  ),
  defense_run_prop = c(
    0.3700935, 0.3641115, 0.3227017, 0.3697105, 0.4532374, 0.4688129,
    0.4250936, 0.4320175, 0.4291755, 0.3721881, 0.4036511, 0.4897119,
    0.4846626, 0.4495238, 0.3992467, 0.3447581, 0.3928571, 0.4123932,
    0.4089069, 0.3677298, 0.3737166, 0.3938294, 0.4157088, 0.3775281,
    0.3978495, 0.3492723, 0.3968566, 0.4137931, 0.4219512, 0.4066543,
    0.2898551, 0.4022770
  )
)

library(ggplot2)
library(ggrepel)
library(scales)
library(dplyr)

team_props <- team_props |>
  mutate(
    nudge_x = ifelse(team == "SEA", 0.007, 0),
    nudge_y = ifelse(team == "SEA", 0.007, 0)
  )

ggplot(team_props, aes(x = offense_run_prop, y = defense_run_prop)) +
  geom_point(color = "midnightblue") +
  ggrepel::geom_text_repel(
    aes(label = team),
    size = 5,
    max.overlaps = 40,
    nudge_x = team_props$nudge_x,
    nudge_y = team_props$nudge_y,
    seed = 41
  ) +geom_hline(yintercept = mean(team_props$defense_run_prop), linetype = "dashed", color = "gray60") +
  geom_vline(xintercept = mean(team_props$offense_run_prop), linetype = "dashed", color = "gray60") +
  scale_x_continuous(
    labels = scales::percent_format(accuracy = 1),
    limits = c(0.3, 0.55),
    name = "Offensive Run Rate"
  ) +
  scale_y_continuous(
    labels = scales::percent_format(accuracy = 1),
    limits = c(0.3, 0.55),
    name = "Defensive Run Rate Faced"
  ) +
  labs(
    subtitle = "Dashed lines represent league average",
    x = "Offensive Run Rate",
    y = "Defensive Run Rate Faced"
  ) +
  theme_minimal(base_size = 16) +
  theme(
    plot.subtitle = element_text(hjust = 0.5),
    axis.title = element_text(face = "bold", size = 20),
    axis.text = element_text(color = "black", size = 13)
  )

```

## Modeling

* We first created a basic model using only info a coach can have before the play
  <ul>
        <li class="fragment">Quarter, down, distance, time left, opposing team, score differential, yard line</li>
        <li class="fragment">Offensive and defensive run proportions, situational run proportions</li>
  </ul>

. . . 

* Model trained on weeks 1-5, tested on weeks 6-9
<ul>
        <li>Accuracy: **72.1%**</li>
        <li>AUC: **0.8085**</li>
  </ul>

. . . 

* How is this useful?
<ul>
        <li class="fragment">Variables are known **before** sending players on the field</li>
        <li class="fragment">Can be built upon</li>
  </ul>

## What's Next?

* Including offensive personnel

. . . 

* Win probabilities

. . .

* Tracking data
<ul>
        <li>Tells us **who** is on the field and **where** they are</li>
        <li>Formations, linemen splits, motions</li>
  </ul>

. . . 

* Performance of players in the game before that play

. . . 

* We have the basic model, now we can build on it

